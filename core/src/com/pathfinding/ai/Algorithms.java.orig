package com.pathfinding.ai;

public class Algorithms {
    private Main main;
    public Algorithms(Main main){
        this.main = main;
    }
    
    class Bellman {

        public void calculate() throws NoPathFoundException {
            main.graphMan.setChanged();
            main.graphMan.notifyObservers(main.graphMan.vectors);
            for(Node n: main.graphMan.nodes) {
                if(n==main.graphMan.startNode) {
                    main.graphMan.n.component = new BellmanComponent().potential(0);
                    ((BellmanComponent)main.graphMan.n.component).isTraversed = true;
                }
                else {
                    main.graphMan.n.component = new BellmanComponent().potential(Integer.MAX_VALUE);
                }
            }

            Array<Node> nodesWithTraversedPredecessors = new Array<Node>();

            for(Node n: main.graphMan.nodes) {
                for(Vector v: main.graphMan.n.endVectors) {
                    if(!((BellmanComponent)v.startNode.component).isTraversed) {
                        continue;
                    }
                    nodesWithTraversedPredecessors.add(n);
                }
            }
            while(nodesWithTraversedPredecessors.size>0
                    && !((BellmanComponent)main.graphMan.endNode.component).isTraversed) {
                for(Node n: nodesWithTraversedPredecessors) {
                    calculateNode(n);
                }
                nodesWithTraversedPredecessors.clear();
                for(Node node: main.graphMan.nodes) {
                    for(Vector v: node.endVectors) {
                        if(((BellmanComponent)node.component).isTraversed ||
                                !((BellmanComponent)v.startNode.component).isTraversed) {
                            continue;
                        }
                        nodesWithTraversedPredecessors.add(node);
                    }
                }

            }

            // Checking for negative cycles:
            for(Vector v: main.graphMan.vectors) {
                if(((BellmanComponent)v.startNode.component).potential+v.cost < ((BellmanComponent)v.endNode.component).potential) {
                    throw new NoPathFoundException("No path found due to negative cycle");
                }
            }
        }

        private void calculateNode(Node node) {
            Node [] previousNodes = new Node[node.endVectors.size]; // the predecessors that have been traversed
            for(int i=0; i < node.endVectors.size; i++) {
                previousNodes[i] = node.endVectors.get(i).startNode;
            }

            // the potential of 'node' from each of the predecessors
            int[] potentials = new int[previousNodes.length];
            for(int i = 0; i < previousNodes.length; i++) {
                potentials[i] = node.endVectors.get(i).cost + ((BellmanComponent)previousNodes[i].component).potential;
                System.out.println(potentials[i]);
            }
            // assign a random potential to 'node' from the list
            ((BellmanComponent)node.component).potential = potentials[0];

            // find the best one (minimum)
            int selectedNodeIndex=-1; // keep an index to find the node that has this potential
            for(int i = 0; i < potentials.length; i++) {
                if(potentials[i] <=  ((BellmanComponent)node.component).potential) {
                    ((BellmanComponent)node.component).potential = potentials[i];
                    selectedNodeIndex = i;
                }
            }

            ((BellmanComponent)node.component).arborescences.add(previousNodes[selectedNodeIndex]);
            for(int i = 0; i < potentials.length; i++) {
                if(potentials[i]==potentials[selectedNodeIndex] && i!=selectedNodeIndex) {
                    ((BellmanComponent)node.component).arborescences.add(previousNodes[i]);
                }
            }
            ((BellmanComponent)node.component).isTraversed = true;
        }

    }

    class Dijkstra {

	public void dijkstra() throws NoPathFoundException {
		main.graphMan.setChanged();
		main.graphMan.notifyObservers(main.graphMan.vectors);
		main.graphMan.dijkstraResults.clear();
		try {
			Array<Node> visitedNodesMap = new Array<Node>();
			for (Node n : main.graphMan.nodes) {
				if (main.graphMan.startNode == n) {
					n.component = new DijkstraComponent().distance(0);
                    ((DijkstraComponent)n.component).distancesHistory.add(0);
				} else {
					n.component = new DijkstraComponent().distance(Integer.MAX_VALUE);
                    ((DijkstraComponent)n.component).distancesHistory.add(Integer.MAX_VALUE);
                }
			}
            int nodesToCheck = main.graphMan.nodes.size;
			Array<Node> neighbours = new Array<Node>();
			while (nodesToCheck > 0) {
				Node current = getMinimumCostNode();
				neighbours.clear();
				for (Vector v : current.startVectors) {
					neighbours.add(v.endNode);
				}
				for (Node neighb : neighbours) {
					if (!((DijkstraComponent)neighb.component).isTraversed) {
						int candidateCost = ((DijkstraComponent)current.component).distanceFromSource
								+ getVector(current, neighb).cost;
						if (candidateCost < ((DijkstraComponent)neighb.component).distanceFromSource) {

                            // Add the distance to the history before changing it
                            ((DijkstraComponent)neighb.component).distancesHistory
                            .add(((DijkstraComponent)neighb.component).distanceFromSource); 
                            //Same for previous node
                            ((DijkstraComponent)neighb.component).nodesHistory
                            .add(((DijkstraComponent)neighb.component).previousNode); 

							((DijkstraComponent)neighb.component).distanceFromSource = candidateCost;
                            ((DijkstraComponent)neighb.component).previousNode = current;
                            
                        }
					}
				}
				visitedNodesMap.add(current);
				if (current == endNode) {
					if (((DijkstraComponent)current.component).distanceFromSource == Integer.MAX_VALUE) {
						throw new NoPathFoundException("No Path Found");
					}
					break;
				}
                ((DijkstraComponent)current.component).isTraversed = true;
				nodesToCheck--;

			}
			Node lastNode = endNode;
			while (((DijkstraComponent)lastNode.component).previousNode != null) {
				dijkstraResults.add(lastNode);
                System.out.println("Added to dijkstraResults");
                        
                lastNode = ((DijkstraComponent)lastNode.component).previousNode;

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
    }

}